//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ActionMaps/PlayerActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionMap"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""314bf0bf-0d5b-4f3a-a008-63f5dd9396ae"",
            ""actions"": [
                {
                    ""name"": ""LeftNote"",
                    ""type"": ""Button"",
                    ""id"": ""0e8bca0e-6175-492f-8513-c4129650fc1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightNote"",
                    ""type"": ""Button"",
                    ""id"": ""595d81cd-e78d-4757-8b50-c52e0c5182fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpNote"",
                    ""type"": ""Button"",
                    ""id"": ""e7d61f8e-6aad-46ee-8d07-b76a018e5459"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownNote"",
                    ""type"": ""Button"",
                    ""id"": ""91b8c933-4064-48cb-be1e-bd6d9919ab13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SoloSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""af83efbc-ea0e-4019-b020-e4b5e63fc9da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e1fcad1-a663-4c36-91dc-fe009a2499b4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4227dda0-be9a-40ce-b98d-0b013e5b1446"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f4b8ff0-7630-43ac-88f6-536aff23e6aa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d7c30b4-9ded-4fbe-9df3-e830ded50818"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b39b7d1-31d4-4cb8-bd70-22330a6bc718"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11941d0b-6785-416e-9f92-9f3fb742e6a8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cb79a89-b3cd-4436-9e41-0c54cfc4f93a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fb5c013-ecc3-40be-8484-e2c900ed2bd9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownNote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""084666da-d259-4f41-bbb3-194c087725a6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SoloSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""f2afed86-e56b-4e61-8c1f-fa0c37043521"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b0eebcc5-958c-4457-8932-f451d2c8a1bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de53d6fa-76b4-4ccc-8f48-6fdd043b54e9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftNote = m_Player.FindAction("LeftNote", throwIfNotFound: true);
        m_Player_RightNote = m_Player.FindAction("RightNote", throwIfNotFound: true);
        m_Player_UpNote = m_Player.FindAction("UpNote", throwIfNotFound: true);
        m_Player_DownNote = m_Player.FindAction("DownNote", throwIfNotFound: true);
        m_Player_SoloSwitch = m_Player.FindAction("SoloSwitch", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_LeftNote;
    private readonly InputAction m_Player_RightNote;
    private readonly InputAction m_Player_UpNote;
    private readonly InputAction m_Player_DownNote;
    private readonly InputAction m_Player_SoloSwitch;
    public struct PlayerActions
    {
        private @PlayerActionMap m_Wrapper;
        public PlayerActions(@PlayerActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftNote => m_Wrapper.m_Player_LeftNote;
        public InputAction @RightNote => m_Wrapper.m_Player_RightNote;
        public InputAction @UpNote => m_Wrapper.m_Player_UpNote;
        public InputAction @DownNote => m_Wrapper.m_Player_DownNote;
        public InputAction @SoloSwitch => m_Wrapper.m_Player_SoloSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @LeftNote.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftNote;
                @LeftNote.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftNote;
                @LeftNote.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftNote;
                @RightNote.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightNote;
                @RightNote.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightNote;
                @RightNote.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightNote;
                @UpNote.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpNote;
                @UpNote.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpNote;
                @UpNote.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpNote;
                @DownNote.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownNote;
                @DownNote.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownNote;
                @DownNote.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDownNote;
                @SoloSwitch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSoloSwitch;
                @SoloSwitch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSoloSwitch;
                @SoloSwitch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSoloSwitch;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftNote.started += instance.OnLeftNote;
                @LeftNote.performed += instance.OnLeftNote;
                @LeftNote.canceled += instance.OnLeftNote;
                @RightNote.started += instance.OnRightNote;
                @RightNote.performed += instance.OnRightNote;
                @RightNote.canceled += instance.OnRightNote;
                @UpNote.started += instance.OnUpNote;
                @UpNote.performed += instance.OnUpNote;
                @UpNote.canceled += instance.OnUpNote;
                @DownNote.started += instance.OnDownNote;
                @DownNote.performed += instance.OnDownNote;
                @DownNote.canceled += instance.OnDownNote;
                @SoloSwitch.started += instance.OnSoloSwitch;
                @SoloSwitch.performed += instance.OnSoloSwitch;
                @SoloSwitch.canceled += instance.OnSoloSwitch;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerActionMap m_Wrapper;
        public UIActions(@PlayerActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnLeftNote(InputAction.CallbackContext context);
        void OnRightNote(InputAction.CallbackContext context);
        void OnUpNote(InputAction.CallbackContext context);
        void OnDownNote(InputAction.CallbackContext context);
        void OnSoloSwitch(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
